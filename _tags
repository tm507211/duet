# OASIS_START
# DO NOT EDIT (digest: 2fe90c4ea015412b3049b17224c8309e)
# Ignore VCS directories, you can use the same kind of rule outside
# OASIS_START/STOP if you want to exclude directories that contains
# useless stuff for the build process
true: annot, bin_annot
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library srk
"srk/src/srk.cmxs": use_srk
"srk/src/srkUtil.cmx": for-pack(Srk)
"srk/src/log.cmx": for-pack(Srk)
"srk/src/disjointSet.cmx": for-pack(Srk)
"srk/src/memo.cmx": for-pack(Srk)
"srk/src/featureTree.cmx": for-pack(Srk)
"srk/src/qQ.cmx": for-pack(Srk)
"srk/src/zZ.cmx": for-pack(Srk)
"srk/src/syntax.cmx": for-pack(Srk)
"srk/src/interval.cmx": for-pack(Srk)
"srk/src/smt.cmx": for-pack(Srk)
"srk/src/srkZ3.cmx": for-pack(Srk)
"srk/src/srkMathsat.cmx": for-pack(Srk)
"srk/src/linear.cmx": for-pack(Srk)
"srk/src/polynomial.cmx": for-pack(Srk)
"srk/src/interpretation.cmx": for-pack(Srk)
"srk/src/srkApron.cmx": for-pack(Srk)
"srk/src/polyhedron.cmx": for-pack(Srk)
"srk/src/srkSimplify.cmx": for-pack(Srk)
"srk/src/abstract.cmx": for-pack(Srk)
"srk/src/nonlinear.cmx": for-pack(Srk)
"srk/src/coordinateSystem.cmx": for-pack(Srk)
"srk/src/wedge.cmx": for-pack(Srk)
"srk/src/quantifier.cmx": for-pack(Srk)
"srk/src/iteration.cmx": for-pack(Srk)
"srk/src/transition.cmx": for-pack(Srk)
"srk/src/bigO.cmx": for-pack(Srk)
"srk/src/hoare.cmx": for-pack(Srk)
<srk/src/*.ml{,i,y}>: pkg_ppx_deriving.show
# Executable test_apak
"apak/test_apak.native": pkg_Z3
"apak/test_apak.native": pkg_apron
"apak/test_apak.native": pkg_apron.boxMPQ
"apak/test_apak.native": pkg_apron.octMPQ
"apak/test_apak.native": pkg_apron.polkaMPQ
"apak/test_apak.native": pkg_batteries
"apak/test_apak.native": pkg_camlidl
"apak/test_apak.native": pkg_gmp
"apak/test_apak.native": pkg_mathsat
"apak/test_apak.native": pkg_oUnit
"apak/test_apak.native": pkg_ocamlgraph
"apak/test_apak.native": pkg_ocrs
"apak/test_apak.native": pkg_ppx_deriving
"apak/test_apak.native": pkg_ppx_deriving.ord
"apak/test_apak.native": pkg_ppx_deriving.show
"apak/test_apak.native": use_srk
<apak/*.ml{,i,y}>: pkg_apron.boxMPQ
<apak/*.ml{,i,y}>: pkg_apron.octMPQ
<apak/*.ml{,i,y}>: pkg_apron.polkaMPQ
<apak/*.ml{,i,y}>: pkg_oUnit
# Library apak
"apak/apak.cmxs": use_apak
"apak/dll.cmx": for-pack(Apak)
"apak/enumeration.cmx": for-pack(Apak)
"apak/evalLink.cmx": for-pack(Apak)
"apak/extGraph.cmx": for-pack(Apak)
"apak/fixpoint.cmx": for-pack(Apak)
"apak/ka.cmx": for-pack(Apak)
"apak/lattice.cmx": for-pack(Apak)
"apak/loop.cmx": for-pack(Apak)
"apak/monoid.cmx": for-pack(Apak)
"apak/pathexp.cmx": for-pack(Apak)
"apak/persistent.cmx": for-pack(Apak)
"apak/recGraph.cmx": for-pack(Apak)
"apak/semilattice.cmx": for-pack(Apak)
"apak/sese.cmx": for-pack(Apak)
"apak/sig.cmx": for-pack(Apak)
"apak/tagged.cmx": for-pack(Apak)
"apak/putil.cmx": for-pack(Apak)
<apak/*.ml{,i,y}>: pkg_Z3
<apak/*.ml{,i,y}>: pkg_apron
<apak/*.ml{,i,y}>: pkg_batteries
<apak/*.ml{,i,y}>: pkg_camlidl
<apak/*.ml{,i,y}>: pkg_gmp
<apak/*.ml{,i,y}>: pkg_mathsat
<apak/*.ml{,i,y}>: pkg_ocamlgraph
<apak/*.ml{,i,y}>: pkg_ocrs
<apak/*.ml{,i,y}>: pkg_ppx_deriving
<apak/*.ml{,i,y}>: pkg_ppx_deriving.ord
<apak/*.ml{,i,y}>: pkg_ppx_deriving.show
<apak/*.ml{,i,y}>: use_srk
# Executable test_srk
"srk/src/test_srk.native": pkg_Z3
"srk/src/test_srk.native": pkg_apron
"srk/src/test_srk.native": pkg_apron.boxMPQ
"srk/src/test_srk.native": pkg_apron.octMPQ
"srk/src/test_srk.native": pkg_apron.polkaMPQ
"srk/src/test_srk.native": pkg_batteries
"srk/src/test_srk.native": pkg_camlidl
"srk/src/test_srk.native": pkg_gmp
"srk/src/test_srk.native": pkg_mathsat
"srk/src/test_srk.native": pkg_oUnit
"srk/src/test_srk.native": pkg_ocamlgraph
"srk/src/test_srk.native": pkg_ocrs
"srk/src/test_srk.native": pkg_ppx_deriving
"srk/src/test_srk.native": pkg_ppx_deriving.ord
<srk/src/*.ml{,i,y}>: pkg_oUnit
<srk/src/*.ml{,i,y}>: pkg_ocamlgraph
# Executable bigtop
"srk/src/bigtop.native": pkg_Z3
"srk/src/bigtop.native": pkg_apron
"srk/src/bigtop.native": pkg_apron.boxMPQ
"srk/src/bigtop.native": pkg_apron.octMPQ
"srk/src/bigtop.native": pkg_apron.polkaMPQ
"srk/src/bigtop.native": pkg_batteries
"srk/src/bigtop.native": pkg_camlidl
"srk/src/bigtop.native": pkg_gmp
"srk/src/bigtop.native": pkg_mathsat
"srk/src/bigtop.native": pkg_ocrs
"srk/src/bigtop.native": pkg_ppx_deriving
"srk/src/bigtop.native": pkg_ppx_deriving.ord
<srk/src/*.ml{,i,y}>: pkg_Z3
<srk/src/*.ml{,i,y}>: pkg_apron
<srk/src/*.ml{,i,y}>: pkg_apron.boxMPQ
<srk/src/*.ml{,i,y}>: pkg_apron.octMPQ
<srk/src/*.ml{,i,y}>: pkg_apron.polkaMPQ
<srk/src/*.ml{,i,y}>: pkg_batteries
<srk/src/*.ml{,i,y}>: pkg_camlidl
<srk/src/*.ml{,i,y}>: pkg_gmp
<srk/src/*.ml{,i,y}>: pkg_mathsat
<srk/src/*.ml{,i,y}>: pkg_ocrs
<srk/src/*.ml{,i,y}>: pkg_ppx_deriving
<srk/src/*.ml{,i,y}>: pkg_ppx_deriving.ord
# Library matchingCC
"pa/cc/matchingCC.cmxs": use_matchingCC
<pa/cc/*.ml{,i,y}>: oasis_library_matchingcc_ccopt
"pa/cc/matching_stubs.c": oasis_library_matchingcc_ccopt
<pa/cc/matchingCC.{cma,cmxa}>: oasis_library_matchingcc_cclib
"pa/cc/libmatchingCC_stubs.lib": oasis_library_matchingcc_cclib
"pa/cc/dllmatchingCC_stubs.dll": oasis_library_matchingcc_cclib
"pa/cc/libmatchingCC_stubs.a": oasis_library_matchingcc_cclib
"pa/cc/dllmatchingCC_stubs.so": oasis_library_matchingcc_cclib
<pa/cc/matchingCC.{cma,cmxa}>: use_libmatchingCC_stubs
<pa/cc/*.ml{,i,y}>: pkg_Z3
<pa/cc/*.ml{,i,y}>: pkg_apron
<pa/cc/*.ml{,i,y}>: pkg_batteries
<pa/cc/*.ml{,i,y}>: pkg_camlidl
<pa/cc/*.ml{,i,y}>: pkg_gmp
<pa/cc/*.ml{,i,y}>: pkg_mathsat
<pa/cc/*.ml{,i,y}>: pkg_ocamlgraph
<pa/cc/*.ml{,i,y}>: pkg_ocrs
<pa/cc/*.ml{,i,y}>: pkg_ppx_deriving
<pa/cc/*.ml{,i,y}>: pkg_ppx_deriving.ord
<pa/cc/*.ml{,i,y}>: pkg_ppx_deriving.show
<pa/cc/*.ml{,i,y}>: use_apak
<pa/cc/*.ml{,i,y}>: use_srk
"pa/cc/matching_stubs.c": pkg_Z3
"pa/cc/matching_stubs.c": pkg_apron
"pa/cc/matching_stubs.c": pkg_batteries
"pa/cc/matching_stubs.c": pkg_camlidl
"pa/cc/matching_stubs.c": pkg_gmp
"pa/cc/matching_stubs.c": pkg_mathsat
"pa/cc/matching_stubs.c": pkg_ocamlgraph
"pa/cc/matching_stubs.c": pkg_ocrs
"pa/cc/matching_stubs.c": pkg_ppx_deriving
"pa/cc/matching_stubs.c": pkg_ppx_deriving.ord
"pa/cc/matching_stubs.c": pkg_ppx_deriving.show
"pa/cc/matching_stubs.c": use_apak
"pa/cc/matching_stubs.c": use_srk
# Library pa
"pa/pa.cmxs": use_pa
"pa/paSmt.cmx": for-pack(Pa)
"pa/paFormula.cmx": for-pack(Pa)
"pa/struct.cmx": for-pack(Pa)
"pa/predicateAutomata.cmx": for-pack(Pa)
<pa/*.ml{,i,y}>: pkg_Z3
<pa/*.ml{,i,y}>: pkg_apron
<pa/*.ml{,i,y}>: pkg_batteries
<pa/*.ml{,i,y}>: pkg_camlidl
<pa/*.ml{,i,y}>: pkg_gmp
<pa/*.ml{,i,y}>: pkg_mathsat
<pa/*.ml{,i,y}>: pkg_ocamlgraph
<pa/*.ml{,i,y}>: pkg_ocrs
<pa/*.ml{,i,y}>: pkg_ppx_deriving
<pa/*.ml{,i,y}>: pkg_ppx_deriving.ord
<pa/*.ml{,i,y}>: pkg_ppx_deriving.show
<pa/*.ml{,i,y}>: use_apak
<pa/*.ml{,i,y}>: use_matchingCC
<pa/*.ml{,i,y}>: use_srk
# Executable test_patools
"patools/test_patools.native": pkg_Z3
"patools/test_patools.native": pkg_apron
"patools/test_patools.native": pkg_apron.boxMPQ
"patools/test_patools.native": pkg_apron.octMPQ
"patools/test_patools.native": pkg_apron.polkaMPQ
"patools/test_patools.native": pkg_batteries
"patools/test_patools.native": pkg_camlidl
"patools/test_patools.native": pkg_gmp
"patools/test_patools.native": pkg_mathsat
"patools/test_patools.native": pkg_oUnit
"patools/test_patools.native": pkg_ocamlgraph
"patools/test_patools.native": pkg_ocrs
"patools/test_patools.native": pkg_ppx_deriving
"patools/test_patools.native": pkg_ppx_deriving.ord
"patools/test_patools.native": pkg_ppx_deriving.show
"patools/test_patools.native": use_apak
"patools/test_patools.native": use_matchingCC
"patools/test_patools.native": use_pa
"patools/test_patools.native": use_srk
<patools/*.ml{,i,y}>: pkg_oUnit
# Executable patools
<patools/*.ml{,i,y}>: oasis_executable_patools_ccopt
"patools/patools.native": pkg_Z3
"patools/patools.native": pkg_apron
"patools/patools.native": pkg_apron.boxMPQ
"patools/patools.native": pkg_apron.octMPQ
"patools/patools.native": pkg_apron.polkaMPQ
"patools/patools.native": pkg_batteries
"patools/patools.native": pkg_camlidl
"patools/patools.native": pkg_gmp
"patools/patools.native": pkg_mathsat
"patools/patools.native": pkg_ocamlgraph
"patools/patools.native": pkg_ocrs
"patools/patools.native": pkg_ppx_deriving
"patools/patools.native": pkg_ppx_deriving.ord
"patools/patools.native": pkg_ppx_deriving.show
"patools/patools.native": use_apak
"patools/patools.native": use_matchingCC
"patools/patools.native": use_pa
"patools/patools.native": use_srk
<patools/*.ml{,i,y}>: pkg_Z3
<patools/*.ml{,i,y}>: pkg_apron
<patools/*.ml{,i,y}>: pkg_apron.boxMPQ
<patools/*.ml{,i,y}>: pkg_apron.octMPQ
<patools/*.ml{,i,y}>: pkg_apron.polkaMPQ
<patools/*.ml{,i,y}>: pkg_batteries
<patools/*.ml{,i,y}>: pkg_camlidl
<patools/*.ml{,i,y}>: pkg_gmp
<patools/*.ml{,i,y}>: pkg_mathsat
<patools/*.ml{,i,y}>: pkg_ocamlgraph
<patools/*.ml{,i,y}>: pkg_ocrs
<patools/*.ml{,i,y}>: pkg_ppx_deriving
<patools/*.ml{,i,y}>: pkg_ppx_deriving.ord
<patools/*.ml{,i,y}>: pkg_ppx_deriving.show
<patools/*.ml{,i,y}>: use_apak
<patools/*.ml{,i,y}>: use_matchingCC
<patools/*.ml{,i,y}>: use_pa
<patools/*.ml{,i,y}>: use_srk
# Executable duet
"duet/duet.native": pkg_Z3
"duet/duet.native": pkg_apron
"duet/duet.native": pkg_apron.boxMPQ
"duet/duet.native": pkg_apron.octMPQ
"duet/duet.native": pkg_apron.polkaMPQ
"duet/duet.native": pkg_batteries
"duet/duet.native": pkg_camlidl
"duet/duet.native": pkg_cil
"duet/duet.native": pkg_cil.default-features
"duet/duet.native": pkg_gmp
"duet/duet.native": pkg_mathsat
"duet/duet.native": pkg_ocamlgraph
"duet/duet.native": pkg_ocrs
"duet/duet.native": pkg_ppx_deriving
"duet/duet.native": pkg_ppx_deriving.ord
"duet/duet.native": pkg_ppx_deriving.show
"duet/duet.native": use_apak
"duet/duet.native": use_matchingCC
"duet/duet.native": use_pa
"duet/duet.native": use_srk
<duet/*.ml{,i,y}>: pkg_Z3
<duet/*.ml{,i,y}>: pkg_apron
<duet/*.ml{,i,y}>: pkg_apron.boxMPQ
<duet/*.ml{,i,y}>: pkg_apron.octMPQ
<duet/*.ml{,i,y}>: pkg_apron.polkaMPQ
<duet/*.ml{,i,y}>: pkg_batteries
<duet/*.ml{,i,y}>: pkg_camlidl
<duet/*.ml{,i,y}>: pkg_cil
<duet/*.ml{,i,y}>: pkg_cil.default-features
<duet/*.ml{,i,y}>: pkg_gmp
<duet/*.ml{,i,y}>: pkg_mathsat
<duet/*.ml{,i,y}>: pkg_ocamlgraph
<duet/*.ml{,i,y}>: pkg_ocrs
<duet/*.ml{,i,y}>: pkg_ppx_deriving
<duet/*.ml{,i,y}>: pkg_ppx_deriving.ord
<duet/*.ml{,i,y}>: pkg_ppx_deriving.show
<duet/*.ml{,i,y}>: use_apak
<duet/*.ml{,i,y}>: use_matchingCC
<duet/*.ml{,i,y}>: use_pa
<duet/*.ml{,i,y}>: use_srk
# Executable cca
"cca/cca.native": pkg_Z3
"cca/cca.native": pkg_apron
"cca/cca.native": pkg_apron.boxMPQ
"cca/cca.native": pkg_apron.octMPQ
"cca/cca.native": pkg_apron.polkaMPQ
"cca/cca.native": pkg_batteries
"cca/cca.native": pkg_camlidl
"cca/cca.native": pkg_cil
"cca/cca.native": pkg_cil.default-features
"cca/cca.native": pkg_gmp
"cca/cca.native": pkg_mathsat
"cca/cca.native": pkg_ocamlgraph
"cca/cca.native": pkg_ocrs
"cca/cca.native": pkg_ppx_deriving
"cca/cca.native": pkg_ppx_deriving.ord
"cca/cca.native": pkg_ppx_deriving.show
"cca/cca.native": use_apak
"cca/cca.native": use_matchingCC
"cca/cca.native": use_pa
"cca/cca.native": use_srk
<cca/*.ml{,i,y}>: pkg_Z3
<cca/*.ml{,i,y}>: pkg_apron
<cca/*.ml{,i,y}>: pkg_apron.boxMPQ
<cca/*.ml{,i,y}>: pkg_apron.octMPQ
<cca/*.ml{,i,y}>: pkg_apron.polkaMPQ
<cca/*.ml{,i,y}>: pkg_batteries
<cca/*.ml{,i,y}>: pkg_camlidl
<cca/*.ml{,i,y}>: pkg_cil
<cca/*.ml{,i,y}>: pkg_cil.default-features
<cca/*.ml{,i,y}>: pkg_gmp
<cca/*.ml{,i,y}>: pkg_mathsat
<cca/*.ml{,i,y}>: pkg_ocamlgraph
<cca/*.ml{,i,y}>: pkg_ocrs
<cca/*.ml{,i,y}>: pkg_ppx_deriving
<cca/*.ml{,i,y}>: pkg_ppx_deriving.ord
<cca/*.ml{,i,y}>: pkg_ppx_deriving.show
<cca/*.ml{,i,y}>: use_apak
<cca/*.ml{,i,y}>: use_matchingCC
<cca/*.ml{,i,y}>: use_pa
<cca/*.ml{,i,y}>: use_srk
# OASIS_STOP
"lib": not_hygienic
true: use_menhir
